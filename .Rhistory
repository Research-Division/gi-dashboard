data$numschoolagekids=rowSums(cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12)>=5 & cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12)<=18,na.rm=TRUE)
data$numkidsunder13=rowSums(cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12)<=12,na.rm=TRUE)
data$ageofYoungestChild=rowMins(cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12),na.rm=TRUE)
# Need to figure out how to do this calculation differently for states with free-pre K.
# If statepreK is in ccdf rules it needs to be populated using the statepreK table so they are linked.
# Remove from CCDF parameters when read in & pass the variable through the function when called.
# Also says school age kids end at 17 not 18
# By default - allocate total family income EQUALLY to each adult family member (income1-income12)
# Default Assumption 1: Equal allocation of income
# Default Assumption 2: All adults are working
data$income1[!is.na(data$agePerson1) & data$agePerson1>=19]<-data$income[!is.na(data$agePerson1) & data$agePerson1>=19]/data$numadults[!is.na(data$agePerson1) & data$agePerson1>=19]
data$income2[!is.na(data$agePerson2) & data$agePerson2>=19]<-data$income[!is.na(data$agePerson2) & data$agePerson2>=19]/data$numadults[!is.na(data$agePerson2) & data$agePerson2>=19]
data$income3[!is.na(data$agePerson3) & data$agePerson3>=19]<-data$income[!is.na(data$agePerson3) & data$agePerson3>=19]/data$numadults[!is.na(data$agePerson3) & data$agePerson3>=19]
data$income4[!is.na(data$agePerson4) & data$agePerson4>=19]<-data$income[!is.na(data$agePerson4) & data$agePerson4>=19]/data$numadults[!is.na(data$agePerson4) & data$agePerson4>=19]
data$income5[!is.na(data$agePerson5) & data$agePerson5>=19]<-data$income[!is.na(data$agePerson5) & data$agePerson5>=19]/data$numadults[!is.na(data$agePerson5) & data$agePerson5>=19]
data$income6[!is.na(data$agePerson6) & data$agePerson6>=19]<-data$income[!is.na(data$agePerson6) & data$agePerson6>=19]/data$numadults[!is.na(data$agePerson6) & data$agePerson6>=19]
data<-data %>%      # Assign state FIPS (can remove this step simply by asking to provide FIPS)
mutate(famsize = numadults + numkids # Family size
, hasdependent = case_when(  numkids>0 ~ 1 # Whether family has dependends (simple logic for now)
, TRUE ~ 0)
, AKorHI = case_when(  stateAbbrev=="AK" ~ "AK"
, stateAbbrev=="HI" ~ "HI"
, TRUE ~ "0")
, totalassets = assets.car1 + assets.cash )
return(data)
}
################
# Merge Imputed Takeups with CPS Data
################
imputed_takeups<-read.csv(paste0(getwd(),"/Public Assistance Take Up Project/analysis/imputed_takeups/cps_2012to2019_takeup_imputed.csv"))
data<-read.dta13(paste0(getwd(),"/WorkForceDevProj/Research/Occupational Transitions and MTR/forBenefitsCalculator/CPSforBenefitsCalculator.dta"), convert.factors = FALSE)
data<- data %>% merge(imputed_takeups, by=c("year","householdid"))
data<-data %>%
rename("stateFIPS" = stfips76
,"income_tm12" = annualincome_tm12 # family income
,"Year" = year)%>%
mutate(assets.cash=0
,assets.car1=0
,income.investment=0
,empl_healthcare=0
,income.gift=0
,income.child_support=0
,income.otherfamily=0
,countyortownName="state.average"
,ownorrent="rent"
,currentyr=2021
,disability1=0
,disability2=0
,disability3=0
,disability4=0
,disability5=0
,disability6=0
,disability7=0
,disability8=0
,disability9=0
,disability10=0
,disability11=0
,disability12=0
,ssdiPIA1=0
,ssdiPIA2=0
,ssdiPIA3=0
,ssdiPIA4=0
,ssdiPIA5=0
,ssdiPIA6=0
,blind1=0
,blind2=0
,blind3=0
,blind4=0
,blind5=0
,blind6=0
,disab.work.exp=0
,prev_ssi=0
,empl_healthcare=1
, snap_takeup=partic_snap_hh_imptd
, section8_takeup=partic_section8_hh_imptd
, medicaid_adult_takeup=partic_medicaid_adult_hh_imptd
, medicaid_child_takeup=partic_medicaid_child_hh_imptd
, medicaid_takeup=case_when(data$partic_medicaid_adult_hh_imptd==1 | data$partic_medicaid_child_hh_imptd==1 ~ 1
,data$partic_medicaid_adult_hh_imptd==0 & data$partic_medicaid_child_hh_imptd==0 ~0)
, aca_takeup=partic_aca_hh_imptd
, privatehealthinsurance=1
, ccdf_takeup=partic_CCDF_hh_imptd
, eitc_takeup=partic_eitc_hh_imptd
, ctc_takeup=partic_ctc_hh_imptd
, cdctc_takeup=partic_cdctc_hh_imptd) %>%
left_join(table.statemap, by="stateFIPS")
data<-InitialTransformations(data)
# Drop observations that are unemployed or out of labor force at any point - we are looking at quartile transitions only
data<-subset(data, occ_quality!=5 & occ_quality!=6)
# Separate into two datasets:
# 1. With public health insurance (NPI)
# 2. Without public health insurance (PI)
dataNPI<-data %>%
filter(aca_takeup==0 & medicaid_takeup==0)
dataPI<-data %>%
filter(aca_takeup==1 | medicaid_takeup==1)
data$annualincome
rm(list=ls())
# Set your working directory
setwd("C:/Users/ilin_/Dropbox")
setwd("C:/Users/f1ixi02/Dropbox (ATL FRB)")
setwd("C:/Users/f1exr03/Dropbox (ATL FRB)")
setwd("C:/Users/f1extm00/Dropbox")
setwd("C:/Users/ellie/Dropbox")
setwd("C:/Users/edgar/Dropbox (ATL FRB)")
# Set up all necessary paths
source(paste0(getwd(), "/WorkForceDevProj/directories.R"), local=TRUE)
## Load expense parameters ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/expenses.rdata"))
## Load benfits parameters ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/parameters.defaults.rdata"))
# load eligible tables of SMI,FPL / crosswalks
load(paste0(getwd(), dir.benefitsexpenses,"/Database/tables.rdata"))
# Call all the functions
source(paste0(getwd(), dir.benefitsexpenses,"/programs/libraries.R"), local=TRUE) # Load required packages
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(getwd(), dir.wagegrowth, "/programs/wage_projection.R"), local=TRUE) # Wage growth functions
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # points working directory to folder of current script
load("CPSforBenefitsCalculator_Output.Rdata")
data<-data[data$id==1,]
data$annualincome_ind
data$annualincome_ind_tm12
rm(list=ls())
# Set your working directory
setwd("C:/Users/ilin_/Dropbox")
setwd("C:/Users/f1exr03/Dropbox (ATL FRB)")
setwd("C:/Users/f1ixi02/Dropbox (ATL FRB)")
setwd("C:/Users/f1exr03/Dropbox (ATL FRB)")
setwd("C:/Users/f1extm00/Dropbox")
setwd("C:/Users/ellie/Dropbox")
setwd("C:/Users/edgar/Dropbox (ATL FRB)")
# Set up all necessary paths
source(paste0(getwd(), "/WorkForceDevProj/directories.R"), local=TRUE)
# load eligible tables of SMI,FPL / crosswalks
load(paste0(getwd(), dir.benefitsexpenses,"/Database/tables.rdata"))
# Load rdata files that are used in the functions (tables, wages, expenses, benefit parameters)
load(paste0(getwd(), dir.benefitsexpenses,"/programs/prd_parameters/benefit.parameters.rdata"))
load(paste0(getwd(), dir.benefitsexpenses,"/programs/prd_parameters/expenses.rdata"))
load(paste0(getwd(), dir.benefitsexpenses,"/programs/prd_parameters/parameters.defaults.rdata"))
# Call all the functions
source(paste0(getwd(), dir.benefitsexpenses,"/programs/libraries.R"), local=TRUE) # Load required packages
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
# Function to implement initial transformations (add to global.R)
# Produce intital transformations of the inputs
# to create core variables that are used across the functions
InitialTransformations<-function(data){
# Calculate number of adults and kids
data$numadults=rowSums(cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12)>=19,na.rm=TRUE)
data$numkids=rowSums(cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12)<=18,na.rm=TRUE) # Need to think about hte assumption on who is "kid". For example EITC defines it under age 19 & USDA adult category starts at 19
data$numschoolagekids=rowSums(cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12)>=5 & cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12)<=18,na.rm=TRUE)
data$numkidsunder13=rowSums(cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12)<=12,na.rm=TRUE)
data$ageofYoungestChild=rowMins(cbind(data$agePerson1, data$agePerson2, data$agePerson3, data$agePerson4, data$agePerson5, data$agePerson6, data$agePerson7, data$agePerson8, data$agePerson9, data$agePerson10, data$agePerson11, data$agePerson12),na.rm=TRUE)
# Need to figure out how to do this calculation differently for states with free-pre K.
# If statepreK is in ccdf rules it needs to be populated using the statepreK table so they are linked.
# Remove from CCDF parameters when read in & pass the variable through the function when called.
# Also says school age kids end at 17 not 18
# By default - allocate total family income EQUALLY to each adult family member (income1-income12)
# Default Assumption 1: Equal allocation of income
# Default Assumption 2: All adults are working
data$income1[!is.na(data$agePerson1) & data$agePerson1>=19]<-data$income[!is.na(data$agePerson1) & data$agePerson1>=19]/data$numadults[!is.na(data$agePerson1) & data$agePerson1>=19]
data$income2[!is.na(data$agePerson2) & data$agePerson2>=19]<-data$income[!is.na(data$agePerson2) & data$agePerson2>=19]/data$numadults[!is.na(data$agePerson2) & data$agePerson2>=19]
data$income3[!is.na(data$agePerson3) & data$agePerson3>=19]<-data$income[!is.na(data$agePerson3) & data$agePerson3>=19]/data$numadults[!is.na(data$agePerson3) & data$agePerson3>=19]
data$income4[!is.na(data$agePerson4) & data$agePerson4>=19]<-data$income[!is.na(data$agePerson4) & data$agePerson4>=19]/data$numadults[!is.na(data$agePerson4) & data$agePerson4>=19]
data$income5[!is.na(data$agePerson5) & data$agePerson5>=19]<-data$income[!is.na(data$agePerson5) & data$agePerson5>=19]/data$numadults[!is.na(data$agePerson5) & data$agePerson5>=19]
data$income6[!is.na(data$agePerson6) & data$agePerson6>=19]<-data$income[!is.na(data$agePerson6) & data$agePerson6>=19]/data$numadults[!is.na(data$agePerson6) & data$agePerson6>=19]
data<-data %>%      # Assign state FIPS (can remove this step simply by asking to provide FIPS)
mutate(famsize = numadults + numkids # Family size
, hasdependent = case_when(  numkids>0 ~ 1 # Whether family has dependends (simple logic for now)
, TRUE ~ 0)
, AKorHI = case_when(  stateAbbrev=="AK" ~ "AK"
, stateAbbrev=="HI" ~ "HI"
, TRUE ~ "0")
, totalassets = assets.car1 + assets.cash
)
return(data)
}
################################################
# READ-IN DATA AND GENERATE NECESSARY VARIABLES
################################################
data<-read.dta13(paste0(getwd(),"/WorkForceDevProj/Research/Occupational Transitions and MTR/forBenefitsCalculator/CPSforBenefitsCalculator.dta"), convert.factors = FALSE)
data$annualincome_tm12
data$annualincome
data<-data[data$id==1,]
four<-data%>%filtrer(occ_quality==4, )
four<-data%>%filter(occ_quality==4, )
View(four)
data<-data %>%
rename("stateFIPS" = stfips76
,"income_tm12" = annualincome_tm12 # family income
,"Year" = year) %>% # rename bc error with fedeitc function which uses this as a variable
mutate(assets.cash=0
,assets.car1=0
,income.investment=0
,empl_healthcare=0
,income.gift=0
,income.child_support=0
,income.otherfamily=0
,countyortownName="state.average"
,ownorrent="rent"
,currentyr=2021
,disability1=0
,disability2=0
,disability3=0
,disability4=0
,disability5=0
,disability6=0
,disability7=0
,disability8=0
,disability9=0
,disability10=0
,disability11=0
,disability12=0
,ssdiPIA1=0
,ssdiPIA2=0
,ssdiPIA3=0
,ssdiPIA4=0
,ssdiPIA5=0
,ssdiPIA6=0
,blind1=0
,blind2=0
,blind3=0
,blind4=0
,blind5=0
,blind6=0
,disab.work.exp=0
,prev_ssi=0) %>%
left_join(table.statemap, by="stateFIPS")
data<-InitialTransformations(data)
# Drop observations that are unemployed or out of labor force at any point - we are looking at quartile transitions only
data<-subset(data, occ_quality!=5 & occ_quality!=6)
# Define income and income increments
data.baseline<-data
data.actual.marginal<-data
data.potential.marginal<-data
data.baseline<-data.baseline %>%
mutate(income = income_tm12
,type = "Baseline")
data$deltaincome<-data$annualincome-data$income_tm12
data.actual.marginal<-data.actual.marginal %>%
mutate(income = income_tm12 + deltaincome
,type = "Marginal-Actual")
data.actual.marginal<-data.actual.marginal %>%
mutate(income = income_tm12 + data$deltaincome
,type = "Marginal-Actual")
four<-data%>%filter(occ_quality==4, )
View(four)
fouractual<-data.actual.marginal%>%filter(occ_quality==4, )
View(fouractual)
data$deltaincome
data$annualincome
data$income_tm12
four<-data%>%filter(occ_quality==4, )
View(four)
View(fouractual)
data.actual.marginal<-data.actual.marginal %>%
mutate(income = income_tm12 + actual_deltaIncome
,type = "Marginal-Actual")
View(fouractual)
#user<-"ilin_/Dropbox"
#user<-"ellie/Dropbox" #Ellie
user<-"edgar/Dropbox (ATL FRB)"
setwd(paste0("C:/Users/", user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/prd_dashboard"))
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/benefit.parameters.rdata"), paste0(getwd(),"/BenefitsCalculator/Database/benefit.parameters.rdata"), overwrite = TRUE)
runApp()
if (!'rsconnect' %in% rownames(installed.packages())){install.packages('rsconnect')}
if (!'openssl' %in% rownames(installed.packages())){install.packages('openssl')}
if (!'askpass' %in% rownames(installed.packages())){install.packages('askpass')}
library(rsconnect)
library(openssl)
library(askpass)
user<-"ilin_/Dropbox"
user<-"ellie/Dropbox"
user<- "edgar/Dropbox (ATL FRB)"
# user<- "f1dat01/Dropbox (ATL FRB)"
# user<-"f1abm01/Dropbox (ATL FRB)"
# Register machine to be a host to the R Shiny tool
if (user=="ilin_/Dropbox") {rsconnect::setAccountInfo(name='emar-data-tools',
token='55F6C007266B56EAEEB7C3EE6121B850',
secret='nHFvkp6b6nBNbfokY2lFbJosxhgFz6It5qQzfjRj')} # Elias
if (user=="ellie/Dropbox") {rsconnect::setAccountInfo(name='emar-data-tools',
token='B5CC17101457CC61F7237510DE647F1B',
secret='S+PeUPrvpY4GPbogsPY9KrWA3MbqxqwOcJ+iQNEM')} #ellie
if (user=="edgar/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='FD2C9EED190796A2F84B0FEAAD080F26',
secret='yz8cLdt2ASeJzmNtSnl3mtZkiYLvdbhJ5d1O1QsQ')} #Edgar
if (user=="f1abm01/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='82AA3A090D30C502126C41AE08CD5794',
secret='SNB+KoA0S4Z5kvcaZ/Tyiv+V1FuYAtTqUwMExcFB')}
if (user=="f1dat01/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='3E0DB271AC3B40AFEF867B42CEBD6AF0',
secret='C5SrQ5plL/gf1TkvcJgLi/7z6Q1N4hWGn22fM+8x')}
path<-paste0("C:/Users/",user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/")
#PRD Dashboard
rsconnect::deployApp(paste0(path,"prd_dashboard")) # PRD Dashboard
rm(list=ls())
# Set your working directory
setwd("C:/Users/ilin_/Dropbox")
setwd("C:/Users/f1ixi02/Dropbox (ATL FRB)")
setwd("C:/Users/f1exr03/Dropbox (ATL FRB)")
setwd("C:/Users/f1extm00/Dropbox")
setwd("C:/Users/ellie/Dropbox")
setwd("C:/Users/edgar/Dropbox (ATL FRB)")
# Set up all necessary paths
source(paste0(getwd(), "/WorkForceDevProj/directories.R"), local=TRUE)
## Load expense parameters ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/expenses.rdata"))
## Load benfits parameters ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/parameters.defaults.rdata"))
# load eligible tables of SMI,FPL / crosswalks
load(paste0(getwd(), dir.benefitsexpenses,"/Database/tables.rdata"))
# Call all the functions
source(paste0(getwd(), dir.benefitsexpenses,"/programs/libraries.R"), local=TRUE) # Load required packages
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(getwd(), dir.wagegrowth, "/programs/wage_projection.R"), local=TRUE) # Wage growth functions
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # points working directory to folder of current script
load("CPSwthTakeUps_Output.Rdata")
rm(list=ls())
# Set your working directory
setwd("C:/Users/ilin_/Dropbox")
setwd("C:/Users/f1ixi02/Dropbox (ATL FRB)")
setwd("C:/Users/f1exr03/Dropbox (ATL FRB)")
setwd("C:/Users/f1extm00/Dropbox")
setwd("C:/Users/ellie/Dropbox")
setwd("C:/Users/edgar/Dropbox (ATL FRB)")
# Set up all necessary paths
source(paste0(getwd(), "/WorkForceDevProj/directories.R"), local=TRUE)
## Load expense parameters ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/expenses.rdata"))
## Load benfits parameters ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/benefit.parameters.rdata"))
## Load eligible tables of SMI,FPL / crosswalks ----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/tables.rdata"))
## Load default parameters for the PRD----
load(paste0(getwd(),dir.benefitsexpenses,"/programs/prd_parameters/parameters.defaults.rdata"))
# load eligible tables of SMI,FPL / crosswalks
load(paste0(getwd(), dir.benefitsexpenses,"/Database/tables.rdata"))
# Call all the functions
source(paste0(getwd(), dir.benefitsexpenses,"/programs/libraries.R"), local=TRUE) # Load required packages
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/benefits_functions.R"), local=TRUE) # Benefits calculations
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/expense_functions.R"), local=TRUE) # Expenses calculations
source(paste0(getwd(), dir.wagegrowth, "/programs/wage_projection.R"), local=TRUE) # Wage growth functions
source(paste0(getwd(), dir.benefitsexpenses, "/programs/functions/BenefitsCalculator_functions.R"), local=TRUE) # Benefits Calculator functions
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # points working directory to folder of current script
load("CPSforBenefitsCalculator_Output.Rdata")
View(snapData)
#user<-"ellie/Dropbox"
#user<-"f1abm01/Dropbox (ATL FRB)"
user<-"edgar/Dropbox (ATL FRB)"
setwd(paste0("C:/Users/", user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/cliff_employer_edition"))
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/benefit.parameters.rdata"), paste0(getwd(),"/mainFiles/Database/benefit.parameters.rdata"), overwrite = TRUE)
runApp()
if (!'rsconnect' %in% rownames(installed.packages())){install.packages('rsconnect')}
if (!'openssl' %in% rownames(installed.packages())){install.packages('openssl')}
if (!'askpass' %in% rownames(installed.packages())){install.packages('askpass')}
library(rsconnect)
library(openssl)
library(askpass)
user<-"ilin_/Dropbox"
user<-"ellie/Dropbox"
user<- "edgar/Dropbox (ATL FRB)"
# user<- "f1dat01/Dropbox (ATL FRB)"
# user<-"f1abm01/Dropbox (ATL FRB)"
# Register machine to be a host to the R Shiny tool
if (user=="ilin_/Dropbox") {rsconnect::setAccountInfo(name='emar-data-tools',
token='55F6C007266B56EAEEB7C3EE6121B850',
secret='nHFvkp6b6nBNbfokY2lFbJosxhgFz6It5qQzfjRj')} # Elias
if (user=="ellie/Dropbox") {rsconnect::setAccountInfo(name='emar-data-tools',
token='B5CC17101457CC61F7237510DE647F1B',
secret='S+PeUPrvpY4GPbogsPY9KrWA3MbqxqwOcJ+iQNEM')} #ellie
if (user=="edgar/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='FD2C9EED190796A2F84B0FEAAD080F26',
secret='yz8cLdt2ASeJzmNtSnl3mtZkiYLvdbhJ5d1O1QsQ')} #Edgar
if (user=="f1abm01/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='82AA3A090D30C502126C41AE08CD5794',
secret='SNB+KoA0S4Z5kvcaZ/Tyiv+V1FuYAtTqUwMExcFB')}
if (user=="f1dat01/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='3E0DB271AC3B40AFEF867B42CEBD6AF0',
secret='C5SrQ5plL/gf1TkvcJgLi/7z6Q1N4hWGn22fM+8x')}
# Push App files from the specific location
path<-paste0("C:/Users/",user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/")
#rsconnect::deployApp(paste0(path,"Employer_Tool"))
rsconnect::deployApp(paste0(path,"cliff_employer_edition"))
user<-"edgar/Dropbox (ATL FRB)"
#user<-"F1DAT01/Dropbox (ATL FRB)"
setwd(paste0("C:/Users/", user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/cliff_employer_edition"))
# Database files
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/tables.rdata"), paste0(getwd(),"/mainFiles/Database/tables.rdata"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/parameters.defaults.rdata"), paste0(getwd(),"/mainFiles/Database/parameters.defaults.rdata"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/expenses.rdata"), paste0(getwd(),"/mainFiles/Database/expenses.rdata"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/benefit.parameters.rdata"), paste0(getwd(),"/mainFiles/Database/benefit.parameters.rdata"), overwrite = TRUE)
# Function files
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/functions/benefits_functions.R"), paste0(getwd(),"/mainFiles/functions/benefits_functions.R"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/functions/expense_functions.R"), paste0(getwd(),"/mainFiles/functions/expense_functions.R"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/functions/BenefitsCalculator_functions.R"), paste0(getwd(),"/mainFiles/functions/BenefitsCalculator_functions.R"), overwrite = TRUE)
# Up-to-date Programs PDF
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/Up-to-date Programs.PDF"), paste0(getwd(),"/www/Up-to-date Programs.PDF"), overwrite = TRUE)
if (!'rsconnect' %in% rownames(installed.packages())){install.packages('rsconnect')}
if (!'openssl' %in% rownames(installed.packages())){install.packages('openssl')}
if (!'askpass' %in% rownames(installed.packages())){install.packages('askpass')}
if (!'packrat' %in% rownames(installed.packages())){install.packages('packrat')}
library(rsconnect)
library(openssl)
library(askpass)
library(packrat)
#user<-"ilin_/Dropbox"
#user<-"ellie/Dropbox"
user<- "edgar/Dropbox (ATL FRB)"
#user<-"f1abm01/Dropbox (ATL FRB)"
# Register machine to be a host to the R Shiny tool
if (user=="ellie/Dropbox") {rsconnect::setAccountInfo(name='emar-data-tools',
token='B5CC17101457CC61F7237510DE647F1B',
secret='S+PeUPrvpY4GPbogsPY9KrWA3MbqxqwOcJ+iQNEM')} #ellie
if (user=="edgar/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='FD2C9EED190796A2F84B0FEAAD080F26',
secret='yz8cLdt2ASeJzmNtSnl3mtZkiYLvdbhJ5d1O1QsQ')} #Edgar
if (user=="Austin/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='82AA3A090D30C502126C41AE08CD5794',
secret='SNB+KoA0S4Z5kvcaZ/Tyiv+V1FuYAtTqUwMExcFB')}
# Push App files from the specific location
path<-paste0("C:/Users/",user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/")
# List of ALL Dashboards
tools_list<-c("gi_dashboard_test", "cliff_employer_edition_test") # when ready copy test files into florida folder. test is most up-to-date
for(tool in tools_list){
rsconnect::deployApp(paste0(path,tool),forceUpdate=TRUE) #
}
shiny::runApp('C:/Users/edgar/Dropbox (ATL FRB)/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/gi_dashboard_test')
if (!'rsconnect' %in% rownames(installed.packages())){install.packages('rsconnect')}
if (!'openssl' %in% rownames(installed.packages())){install.packages('openssl')}
if (!'askpass' %in% rownames(installed.packages())){install.packages('askpass')}
if (!'packrat' %in% rownames(installed.packages())){install.packages('packrat')}
library(rsconnect)
library(openssl)
library(askpass)
library(packrat)
#user<-"ilin_/Dropbox"
#user<-"ellie/Dropbox"
user<- "edgar/Dropbox (ATL FRB)"
#user<-"f1abm01/Dropbox (ATL FRB)"
# Register machine to be a host to the R Shiny tool
if (user=="ellie/Dropbox") {rsconnect::setAccountInfo(name='emar-data-tools',
token='B5CC17101457CC61F7237510DE647F1B',
secret='S+PeUPrvpY4GPbogsPY9KrWA3MbqxqwOcJ+iQNEM')} #ellie
if (user=="edgar/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='FD2C9EED190796A2F84B0FEAAD080F26',
secret='yz8cLdt2ASeJzmNtSnl3mtZkiYLvdbhJ5d1O1QsQ')} #Edgar
if (user=="Austin/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='82AA3A090D30C502126C41AE08CD5794',
secret='SNB+KoA0S4Z5kvcaZ/Tyiv+V1FuYAtTqUwMExcFB')}
# Push App files from the specific location
path<-paste0("C:/Users/",user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/")
# List of ALL Dashboards
tools_list<-c("gi_dashboard_test") # when ready copy test files into florida folder. test is most up-to-date
for(tool in tools_list){
rsconnect::deployApp(paste0(path,tool),forceUpdate=TRUE) #
}
View(section8Data)
user<-"edgar/Dropbox (ATL FRB)"
setwd(paste0("C:/Users/", user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/gi_dashboard"))
# Database files
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/tables.rdata"), paste0(getwd(),"/mainFiles/Database/tables.rdata"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/parameters.defaults.rdata"), paste0(getwd(),"/mainFiles/Database/parameters.defaults.rdata"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/expenses.rdata"), paste0(getwd(),"/mainFiles/Database/expenses.rdata"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/prd_parameters/benefit.parameters.rdata"), paste0(getwd(),"/mainFiles/Database/benefit.parameters.rdata"), overwrite = TRUE)
# Function files
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/functions/benefits_functions.R"), paste0(getwd(),"/mainFiles/functions/benefits_functions.R"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/functions/expense_functions.R"), paste0(getwd(),"/mainFiles/functions/expense_functions.R"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/functions/BenefitsCalculator_functions.R"), paste0(getwd(),"/mainFiles/functions/BenefitsCalculator_functions.R"), overwrite = TRUE)
file.copy(paste0("C:/Users/",user,"/WorkForceDevProj/Documentation/Benefits & Expenses Database/programs/libraries.R"), paste0(getwd(),"/mainFiles/libraries.R"), overwrite = TRUE)
runApp()
if (!'rsconnect' %in% rownames(installed.packages())){install.packages('rsconnect')}
if (!'openssl' %in% rownames(installed.packages())){install.packages('openssl')}
if (!'askpass' %in% rownames(installed.packages())){install.packages('askpass')}
if (!'packrat' %in% rownames(installed.packages())){install.packages('packrat')}
library(rsconnect)
library(openssl)
library(askpass)
library(packrat)
#user<-"ilin_/Dropbox"
#user<-"ellie/Dropbox"
user<- "edgar/Dropbox (ATL FRB)"
#user<-"f1abm01/Dropbox (ATL FRB)"
# Register machine to be a host to the R Shiny tool
if (user=="ellie/Dropbox") {rsconnect::setAccountInfo(name='emar-data-tools',
token='B5CC17101457CC61F7237510DE647F1B',
secret='S+PeUPrvpY4GPbogsPY9KrWA3MbqxqwOcJ+iQNEM')} #ellie
if (user=="edgar/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='FD2C9EED190796A2F84B0FEAAD080F26',
secret='yz8cLdt2ASeJzmNtSnl3mtZkiYLvdbhJ5d1O1QsQ')} #Edgar
if (user=="Austin/Dropbox (ATL FRB)") {rsconnect::setAccountInfo(name='emar-data-tools',
token='82AA3A090D30C502126C41AE08CD5794',
secret='SNB+KoA0S4Z5kvcaZ/Tyiv+V1FuYAtTqUwMExcFB')}
# Push App files from the specific location
path<-paste0("C:/Users/",user,"/WorkForceDevProj/CareerLadderTool/Tools for Shinyapps.io/")
# List of ALL Dashboards
tools_list<-c("gi_dashboard") # when ready copy test files into florida folder. test is most up-to-date
for(tool in tools_list){
rsconnect::deployApp(paste0(path,tool),forceUpdate=TRUE) #
}
